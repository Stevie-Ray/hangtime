rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function authenticated() { return request.auth.uid != null }

    match /users/{userId} {
      allow read: if authenticated()
      allow get: if authenticated() && request.auth.uid == userId;
      allow create: if authenticated() && request.auth.uid == userId;
      allow update, delete: if authenticated() && request.auth.uid == userId;
    }
    
    // Allow authenticated users to update any user document for follow operations
    match /users/{userId} {
      allow update: if authenticated() && 
        (request.auth.uid == userId || 
         // Allow follow/unfollow operations on followers and following arrays
         (request.resource.data.keys().hasAny(['followers', 'following', 'followersCount', 'followingCount'])));
    }

    match /{path=**}/workouts/{workoutId} {
      allow read: if authenticated()
      allow update: if authenticated()
    }

    match /users/{userId}/workouts/{workoutId} {
      allow get: if authenticated() && request.auth.uid == userId;
      allow list: if authenticated() && request.auth.uid == userId;
      allow create: if authenticated() && request.auth.uid == userId;
      allow update, delete: if authenticated() && request.auth.uid == userId;
    }

     match /users/{userId}/activities/{activityId} {
      allow get: if authenticated() && request.auth.uid == userId;
      allow list: if authenticated() && request.auth.uid == userId;
      allow create: if authenticated() && request.auth.uid == userId;
      allow update, delete: if authenticated() && request.auth.uid == userId;
    }
  }
}
